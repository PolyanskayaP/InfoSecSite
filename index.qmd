---
title: "Positive Hack Days: Синтаксические (и лексические) анализаторы в современной разработке"
---

В Парке Горького завершился киберфестиваль Positive Hack Days, в рамках которого гости узнали, как не стать жертвами мошенников на маркетплейсах, а также об особенностях ChatGPT, выборе безопасного VPN и других аспектах IT и ИБ.

Одним из наиболее интересных на мой взгляд был доклад "[Синтаксические (и лексические) анализаторы в современной разработке](https://phdays.com/broadcast/?tag=python-moscow&talk=254)". Основные тезисы представлены далее.

Зачем нам анализировать пользовательский ввод?

1.  Мы хотим давать пользователю подсказки на основе ввода
2.  Мы хотим подсвечивать синтаксические ошибки
3.  Мы хотим подсвечивать куски query на оптимизацию

У каждого языка есть:

-   Алфавит (набор символов)

-   Правила составления выражений (грамматики)

Синтаксические парсеры:

1.  Инструменты, используемые для анализа и разбора текстов, составленных на естественных или формальных языках

2.  Используются для определения структуры языков и связей между элементами

Задача: составление запросов в некую систему аналитики, т.е. вместо SQL-запросов писать:

`clients: 23.05`

`cats: 2019-05-17`

`orders: 2018`

Шаги получения:

1.  Распарсить вход "clients: 23.05"

2.  Получить что-то

3.  Сгенерировать SQL

Парсер-генераторы - библиотека для создания парсеров на основе заданной грамматики\
Пример: Lark, Antlr, Ply

Парсеры - программный код для синтаксического анализа конкретной грамматики\
Пример: Xml, Yaml, Sqlparse, Sqlglot

![](2.jpg){width="311"} ![](1.jpg){width="296"}

Выводы по поводу написания парсера:

-   Готовое решение всегда выгоднее самописного, если его можно допилить

-   Чем больше грамматика языка, тем больше размер проблемы, парсить разные диалекты DDL SQL - уже сложно

-   Прежде чем выбирать библиотеку для генерации парсера - посмотрите внимательно, как выглядит определение грамматик, трансформеров AST и т.д.

-   Кто будет после вас поддерживать этот парсер?\
    Выбирайте максимально понятный инструмент для генерации или оставляйте подробные инструкции

-   AST - как результат работы парсера, всегда понятнее и проще в дальнейшей работе

-   Если вам достаточно пары регулярок - пользуйтесь ими

-   Если вам нужен SQL-парсер для определенного диалекта - посмотрите в открытом доступе ANTLR (LL) грамматики, возможно, или вы найдете нужную вам, или что-то будет проще дописать, чем писать с 0\
    \
    PositiveHackdays))))\_\_
